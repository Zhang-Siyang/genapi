// CODE GENERATED BY genapi. DO NOT EDIT.
package api

import (
	"context"
	"github.com/lexcao/genapi"
)

type implTodoAPI struct {
	client genapi.HttpClient
}

// SetHttpClient implments genapi.Interface
func (i *implTodoAPI) SetHttpClient(client genapi.HttpClient) {
	i.client = client
}

func (i *implTodoAPI) GetTodos(ctx context.Context) ([]Todo, error) {
	resp, err := i.client.Do(&genapi.Request{
		Method:  "GET",
		Path:    "/todos",
		Context: ctx,
	})
	return genapi.HandleResponse[[]Todo](resp, err)
}

func (i *implTodoAPI) GetTodo(ctx context.Context, id string) (Todo, error) {
	resp, err := i.client.Do(&genapi.Request{
		Method:     "GET",
		Path:       "/todos/{id}",
		PathParams: map[string]string{"id": id},
		Context:    ctx,
	})
	return genapi.HandleResponse[Todo](resp, err)
}

func (i *implTodoAPI) CreateTodo(ctx context.Context, todo Todo) (Todo, error) {
	resp, err := i.client.Do(&genapi.Request{
		Method:  "POST",
		Path:    "/todos",
		Context: ctx,
		Body:    todo,
	})
	return genapi.HandleResponse[Todo](resp, err)
}

func (i *implTodoAPI) UpdateTodo(ctx context.Context, id string, todo Todo) (Todo, error) {
	resp, err := i.client.Do(&genapi.Request{
		Method:     "PUT",
		Path:       "/todos/{id}",
		PathParams: map[string]string{"id": id},
		Context:    ctx,
		Body:       todo,
	})
	return genapi.HandleResponse[Todo](resp, err)
}

func (i *implTodoAPI) DeleteTodo(ctx context.Context, id string) error {
	resp, err := i.client.Do(&genapi.Request{
		Method:     "DELETE",
		Path:       "/todos/{id}",
		PathParams: map[string]string{"id": id},
		Context:    ctx,
	})
	return genapi.HandleResponse0(resp, err)
}

func init() {
	genapi.Register[TodoAPI, *implTodoAPI](
		genapi.Config{
			BaseURL: "https://jsonplaceholder.typicode.com",
		},
	)
}
