package generator

import (
	"text/template"

	"github.com/lexcao/genapi/internal/build/model"
)

type TemplateName = string

const tmplMain TemplateName = "tmplMain"
const tmplInterface TemplateName = "tmplInterface"
const tmplMethod TemplateName = "tmplMethod"
const tmplMethodBody TemplateName = "tmplMethodBody"

type templateData struct {
	Package    string
	Imports    []string
	Interfaces []model.Interface
}

var templates = template.Must(
	template.New(tmplMain).Parse(`
// CODE GENERATED BY genapi. DO NOT EDIT.
package {{.Package}}

{{- with .Imports }}
import (
	{{- range . }}
	{{.}}
	{{- end }}
)
{{- end }}

{{range .Interfaces}}
{{template "tmplInterface" .}}
{{end}}

func init() {
	{{- range .Interfaces }}
	genapi.Register[{{.Name}}, *impl{{.Name}}](
		{{ .Bindings.Config }},
	)
	{{- end }}
}
`))

func init() {
	template.Must(templates.New(tmplInterface).Parse(`
{{- $impl := printf "impl%s" .Name}}
type {{ $impl }} struct {
	client genapi.HttpClient
}

// SetHttpClient implments genapi.Interface
func (i *{{ $impl }}) SetHttpClient(client genapi.HttpClient) {
	i.client = client
}

{{range .Methods}}
{{template "tmplMethod" .}}
{{end}}
`))

	template.Must(templates.New(tmplMethod).Parse(`
func (i *impl{{ .Interface.Name }}) {{ .Name }}(
{{- range $i, $p := .Params }}
	{{- if $i }}, {{ end }}{{ $p.Name }} {{ $p.Type }}
{{- end -}}
)
{{- if gt (len .Results) 1 }}({{- end -}}
	{{- range $i, $r := .Results }}
	{{- if $i }}, {{ end }}{{ $r.Name }} {{ $r.Type }}
	{{- end -}}
{{- if gt (len .Results) 1 }}){{- end -}}
{{- " " -}}
{
{{- template "tmplMethodBody" . -}}
}
`))

	template.Must(templates.New(tmplMethodBody).Parse(`
	{{- with .Bindings.Results -}}
	{{- .Assignment -}} :=
	{{- end -}}i.client.Do(&genapi.Request{
		{{- with .Bindings.Method }}
		Method: "{{.}}",
		{{- end }}
		{{- with .Bindings.Path }}
		Path: "{{.}}",
		{{- end }}
		{{- with .Bindings.PathParams }}
		PathParams: {{.}},
		{{- end }}
		{{- with .Bindings.Queries }}
		Queries: {{.}},
		{{- end }}
		{{- with .Bindings.Header }}
		Header: {{.}},
		{{- end }}
		{{- with .Bindings.Context }}
		Context: {{.}},
		{{- end }}
		{{- with .Bindings.Body }}
		Body: {{.}},
		{{- end }}
	})
	{{ with .Bindings.Results -}}
	return {{ .Statement -}}
	{{- end -}}
	`))
}
